@import "~compass-mixins/lib/compass";
@import "./variables";

@mixin rotate($deg) {
  @include transform-origin(bottom);
  @include transform(translate(-30%, 350%) rotate(#{$deg}deg));
}

@mixin headings($from: 1, $to: 6) {
  @for $i from $from through $to {
    h#{$i} {
      @content;
    }
  }
}

$red-magic-number: 241;
$green-magic-number: 691;
$blue-magic-number: 68;
$brightness-divisor: $red-magic-number + $green-magic-number + $blue-magic-number;

@function sqrt ($r) {
    $x0: 1;
    $x1: $x0;

    @for $i from 1 through 10 {
        $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
        $x0: $x1;
    }

    @return $x1;
}

@function brightness($color) {
  // Extract color components
  $red-component: red($color);
  $green-component: green($color);
  $blue-component: blue($color);

  // Calculate a brightness value in 3d color space between 0 and 255
  $number: sqrt((($red-component * $red-component * $red-magic-number) + ($green-component * $green-component * $green-magic-number) + ($blue-component * $blue-component * $blue-magic-number)) / $brightness-divisor);

  // Convert to percentage and return
  @return 100% * $number / 255;
}

@function contrasting-color($color, $light, $dark) {
  @if brightness($color) < 65% {
    @return $light;
  } @else {
    @return $dark;
  }
}

@mixin center($horizontal: true, $vertical: true) {
  position: absolute;

  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);

  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

$proj-1-color: contrasting-color($proj-1-background, $accent-color, $primary-color);
$proj-2-color: contrasting-color($proj-2-background, $accent-color, $primary-color);
$proj-3-color: contrasting-color($proj-3-background, $accent-color, $primary-color);
$proj-4-color: contrasting-color($proj-4-background, $accent-color, $primary-color);
$proj-5-color: contrasting-color($proj-5-background, $accent-color, $primary-color);
$proj-6-color: contrasting-color($proj-6-background, $accent-color, $primary-color);
%proj-1-background {
  background-color: $proj-1-color;
}
%proj-2-background {
  background-color: $proj-2-color;
}
%proj-3-background {
  background-color: $proj-3-color;
}
%proj-4-background {
  background-color: $proj-4-color;
}
%proj-5-background {
  background-color: $proj-5-color;
}
%proj-6-background {
  background-color: $proj-6-color;
}

%proj-1-color {
  color: $proj-1-color;
}
%proj-2-color {
  color: $proj-2-color;
}
%proj-3-color {
  color: $proj-3-color;
}
%proj-4-color {
  color: $proj-4-color;
}
%proj-5-color {
  color: $proj-5-color;
}
%proj-6-color {
  color: $proj-6-color;
}

@mixin project($background: false, $from: 1, $to: 6) {
  @for $i from $from through $to {
    .project#{$i} {
      @if ($background) {
        @extend %proj-#{$i}-background;
      }
      @else {
        @extend %proj-#{$i}-color;
      }
    }
  }
}

@mixin transition($timing: 400ms, $timing-function: ease-in-out) {
  transition: all $timing $timing-function;
}

@mixin r($point) {
  @if $point==$small {
    @media ( min-width: $small ) {
      @content;
    }
  }
  @if $point==$medium {
    @media ( min-width: $medium ) {
      @content;
    }
  }
  @if $point==$large {
    @media ( min-width: $large ) {
      @content;
    }
  }
}
